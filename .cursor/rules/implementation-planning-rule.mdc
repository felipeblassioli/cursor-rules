---
description: 
globs: 
alwaysApply: true
---
# Implementation Planning System

Rule for managing implementation plans throughout the development lifecycle, ensuring proper planning before implementation begins.

<rule>
name: implementation_planning
filters:
  # Plan management filters
  - type: event
    pattern: "task_start"
  - type: event
    pattern: "implementation_start"
  - type: command
    pattern: "plan"
  - type: file_change
    pattern: ".cursor/plans/*.md"
  - type: event
    pattern: "plan_status_change"

actions:
  #
  # SECTION 1: PLAN CREATION & MANAGEMENT
  #
  
  - type: react
    event: "task_start"
    action: |
      # Auto-create plan skeleton when task starts
      
      When a new task starts, I'll:
      1. Add plan_required: true to task's front-matter
      2. Generate plan skeleton at `.cursor/plans/PLAN-[TASK-ID].md` with:
         - Front-matter (plan_status: Draft, task_id, spec_path, timestamps)
         - All mandatory sections:
           * Overview & Scope
           * Assumptions / Constraints
           * Step-by-step Implementation Steps
           * Rollback / Back-out Strategy
           * Risks & Mitigations
           * Open Questions / Follow-ups
      3. Link the plan to its task and specification
      
      This ensures every task has an associated implementation plan.

  - type: react
    conditions:
      - pattern: "plan create"
    action: |
      # Manually create a new implementation plan
      
      I'll create a new plan by:
      1. Generating a unique PLAN-ID
      2. Creating the plan file in `.cursor/plans/`
      3. Setting up front-matter with Draft status
      4. Adding all mandatory sections
      5. Linking to relevant task and specification
      
      This is rarely needed since plans are auto-created on task_start.

  - type: react
    conditions:
      - pattern: "plan update"
    action: |
      # Update an existing plan's content
      
      I'll update the specified plan:
      1. Preserve existing front-matter
      2. Regenerate/refine plan content
      3. Set status to InReview
      4. Update the updated timestamp
      5. Trigger knowledge capture (via knowledge_management rule)
      
      This allows iterative refinement of implementation plans.

  - type: react
    conditions:
      - pattern: "plan approve"
    action: |
      # Approve an implementation plan
      
      I'll process plan approval:
      1. Set plan_status to Approved
      2. Update task's plan_required flag to false
      3. Record approval timestamp
      4. Notify development workflow system that implementation can begin
      5. Capture approval as a learning (via knowledge_management rule)
      
      This unblocks implementation work for the associated task.

  - type: react
    conditions:
      - pattern: "plan reject"
    action: |
      # Reject or request revision of a plan
      
      I'll process plan rejection:
      1. Set plan_status to RevisionRequired
      2. Update task's plan_required flag to true
      3. Block implementation until re-approval
      4. Record rejection timestamp
      5. Capture rejection reason as learning
      
      This ensures implementation doesn't proceed with inadequate planning.

  - type: react
    conditions:
      - pattern: "plan list"
    action: |
      # List all implementation plans
      
      I'll generate a table showing:
      1. Plan IDs and titles
      2. Current status of each plan
      3. Linked tasks and specifications
      4. Creation and last update dates
      5. Approval status
      
      This provides visibility into planning status across the project.
  
  #
  # SECTION 2: GUARDS & AUTOMATION
  #
  
  - type: react
    event: "implementation_start"
    action: |
      # Guard implementation start based on plan status
      
      Before allowing implementation:
      1. Check if task requires a plan (plan_required flag)
      2. If required, verify plan status is Approved
      3. If not approved, reject implementation start
      4. If approved, allow implementation to proceed
      
      This enforces the planning-first workflow.

  - type: react
    event: "file_change"
    conditions:
      - pattern: ".cursor/plans/.*\\.md$"
    action: |
      # Handle plan file changes
      
      When a plan file changes:
      1. If plan was previously Approved:
         - Set status to RevisionRequired
         - Update task's plan_required flag
         - Block implementation until re-approval
      2. Trigger knowledge capture
      3. Update plan's updated timestamp
      4. Refresh plan index
      
      This ensures changes to approved plans are properly reviewed.
  
  #
  # SECTION 3: INTEGRATION HANDLERS
  #
  
  - type: react
    event: "plan_status_change"
    action: |
      # Handle plan status changes
      
      When plan status changes:
      1. Update task metadata
      2. Notify development workflow system
      3. Update specification links if needed
      4. Capture status change as learning
      5. Refresh plan index
      
      This keeps all systems in sync with plan status.

  - type: suggest
    message: |
      ### Implementation Planning System

      I manage implementation plans with the following commands:

      **Plan Management:**
      - `plan create "Title"` - Manually create a new plan
      - `plan update [path]` - Update plan content (sets status → InReview)
      - `plan approve PLAN-ID` - Approve plan and unblock implementation
      - `plan reject PLAN-ID` - Request plan revision
      - `plan list` - Show all plans and their status

      **Automatic Behaviors:**
      - When task starts → Auto-create Draft plan
      - When approved plan changes → Set status to RevisionRequired
      - When implementation starts → Verify plan is approved

      Plans are stored in `.cursor/plans/` and must be approved before
      implementation can begin.

examples:
  - input: |
      plan create "User Authentication Implementation"
    output: "Plan created: PLAN-2025-03-05-01 in Draft status"

  - input: |
      plan approve PLAN-2025-03-05-01
    output: "Plan approved. Implementation may begin. Task TASK-2025-03-05-01 updated."

  - input: |
      plan list
    output: "Generated table of 5 implementation plans with their current status."

metadata:
  priority: high
  version: 1.0
</rule>